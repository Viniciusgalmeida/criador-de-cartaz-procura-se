# Task ID: 11
# Title: Implement WhatsApp Sharing Functionality
# Status: pending
# Dependencies: 9
# Priority: medium
# Description: Create the functionality to share the poster via WhatsApp with a pre-formatted message.
# Details:
1. Create a WhatsApp share button component:
```typescript
const WhatsAppShareButton: React.FC = () => {
  const { t, language } = useLanguage();
  const { formData } = useFormData();
  
  const generateMessage = () => {
    const title = language === 'pt' ? 'PROCURA-SE' : 'MISSING';
    let message = `${title}: ${formData.petName}\n`;
    
    if (formData.lastSeenLocation) {
      message += `${t('poster.lastSeen')}: ${formData.lastSeenLocation}\n`;
    }
    
    if (formData.petDescription) {
      message += `${t('poster.description')}: ${formData.petDescription}\n`;
    }
    
    if (formData.reward?.amount > 0) {
      const currency = formData.reward.currency === 'BRL' ? 'R$' : '$';
      message += `${t('poster.reward')}: ${currency}${formData.reward.amount}\n`;
    }
    
    message += `\n${t('poster.contact')}: ${formData.ownerName}\n${formData.contactPhone}`;
    
    return encodeURIComponent(message);
  };
  
  const shareViaWhatsApp = () => {
    const message = generateMessage();
    window.open(`https://wa.me/?text=${message}`, '_blank');
  };
  
  return (
    <button
      onClick={shareViaWhatsApp}
      className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded flex items-center gap-2"
    >
      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z" />
      </svg>
      {t('share.whatsApp')}
    </button>
  );
};
```
2. Add the WhatsApp share button to the poster page
3. Generate a formatted message that includes all relevant poster information
4. Ensure the message is properly encoded for URL use

# Test Strategy:
Test the WhatsApp sharing functionality by verifying the generated message contains all the relevant information. Test with various form data combinations. Verify that the URL is properly encoded. Mock the window.open function for unit testing.

# Subtasks:
## 1. Implement WhatsApp sharing button and message formatting [pending]
### Dependencies: None
### Description: Create a reusable React component for the WhatsApp sharing button and implement message formatting logic
### Details:
1. Create a new React component called 'WhatsAppShareButton'
2. Design the button UI using styled-components or CSS modules
3. Implement a function to format the share message, including:
   - Product title
   - Short description
   - Price
   - URL to the product page
4. Add proper accessibility attributes (aria-label, role)
5. Implement error handling for message formatting
6. Create unit tests for the component and message formatting function
7. Optimize the component for performance using React.memo or useMemo where appropriate

## 2. Implement platform-specific WhatsApp sharing logic [pending]
### Dependencies: 11.1
### Description: Create separate sharing logic for different mobile platforms (iOS, Android) and desktop
### Details:
1. Implement a utility function to detect the user's platform (iOS, Android, desktop)
2. For mobile platforms:
   - Use the WhatsApp URL scheme (whatsapp://send?text=)
   - Encode the formatted message for URL usage
3. For desktop:
   - Use the web.whatsapp.com link with encoded message
4. Implement fallback logic for unsupported platforms
5. Add error handling for failed share attempts
6. Create platform-specific tests to ensure correct behavior
7. Implement analytics tracking for successful shares and errors
8. Optimize the sharing process for quick loading and response

## 3. Integrate WhatsApp sharing into the product detail page [pending]
### Dependencies: 11.1, 11.2
### Description: Add the WhatsApp sharing functionality to the product detail page and ensure proper context management
### Details:
1. Import the WhatsAppShareButton component into the product detail page
2. Add the sharing button in an appropriate location (e.g., near other sharing options)
3. Implement a custom hook (useWhatsAppShare) to manage sharing state and logic
4. Connect the sharing button to the product context to access necessary details
5. Implement loading and error states for the sharing process
6. Add success and error notifications for user feedback
7. Ensure the sharing functionality works with server-side rendering (if applicable)
8. Implement proper SEO considerations for the sharing feature
9. Conduct thorough cross-browser and cross-device testing
10. Update the product detail page documentation to include the new sharing feature

